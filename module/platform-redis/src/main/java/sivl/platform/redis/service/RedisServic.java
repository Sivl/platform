package sivl.platform.redis.service;import java.util.List;import java.util.Set;import sivl.platform.common.model.PageModel;/** * redis服务<br/> * 目的：对redis进行操作 * @author lixuefeng * @createTime 2015年12月23日 * @version 1.0 */public interface RedisServic<V> {	/**	 * 保存对象	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveObject(String prefixKey,String suffixKey,int timeout,V value);		/**	 * 保存数据当天有效	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveObjectSameDay(String prefixKey,String suffixKey,V value);		/**	 * 根据key查询对象	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @return	 */	V getObjectByKey(String prefixKey,String suffixKey);		/**	 * 保存数据到队列 FIFO<br/>	 * 入队列：保证先进先出	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveObjectInQueue(String prefixKey,String suffixKey,int timeout,V value);		/**	 * 从队列里面取得对象 FIFO<br/>	 * 出队列：先进先出	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @return	 */	V getObjectInQueue(String prefixKey,String suffixKey);		/**	 * 保存数据到栈 LIFO<br/>	 * 入栈：保证数据后进先出	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveObjectInStack(String prefixKey,String suffixKey,int timeout,V value);		/**	 * 从栈里面取得对象 LIFO<br/> 	 * 出栈：后进先出	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @return	 */	V getObjectInStack(String prefixKey,String suffixKey);		/**	 * 保存数据到list集合数据	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveObjectInList(String prefixKey,String suffixKey,int timeout,V value);		/**	 * 保存set集合	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param values 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	@SuppressWarnings("unchecked")	void saveSet(String prefixKey,String suffixKey,int timeout,V... values);		/**	 * 取得set集合数据	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @return	 */	Set<V> getSet(String prefixKey,String suffixKey);		/**	 * 保存数据到map	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param timeout 超时时间 按分钟计算	 * @param hashKey map key	 * @param value 对象值（保存的对象必须实现Serializable接口）	 * @return	 */	V saveMap(String prefixKey,String suffixKey,int timeout,String hashKey,V value);		/**	 * 取得list集合	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @return	 */	List<V> getList(String prefixKey,String suffixKey);		/**	 * 范围检索集合数据	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param start	 * @param end	 * @return	 */	List<V> getRangeList(String prefixKey,String suffixKey,int start, int end);		/**	 * 分页查询集合数据	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param page	 * @return	 */	PageModel<V> getPageList(String prefixKey,String suffixKey,PageModel<V> page);		/**	 * 清除缓存数据	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 */	void deleteByKey(String prefixKey,String suffixKey);		/**	 * 移除集合中的值	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param prefixKey	 * @param suffixKey	 * @param count	 * @param value	 */	void removeListValue(String prefixKey,String suffixKey,Long count,V value);}