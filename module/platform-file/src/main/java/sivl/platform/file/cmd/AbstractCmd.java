package sivl.platform.file.cmd;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.util.Map;import sivl.platform.file.utils.BityUtils;public abstract class AbstractCmd<T> implements Command<T> {		protected byte requestCmd;	protected byte responseCmd;	protected long responseSize;	protected byte[] body;	protected long body2Len = 0l;		/**	 * 请求	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param socketOut	 * @throws IOException	 */	protected void request(OutputStream socketOut)throws IOException {		socketOut.write(getRequestHeaderAndBody());	}		/**	 * 请求	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param socketOut	 * @param is	 * @throws IOException	 */	protected void request(OutputStream socketOut,InputStream is)throws IOException {		request(socketOut);		int readBytes;		//一次读16kb		byte[] buff = new byte[256 * 1024];		while ((readBytes = is.read(buff)) >= 0) {			if (readBytes == 0) {				continue;			}			socketOut.write(buff, 0, readBytes);		}		is.close();	}		/**	 * 请求	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param socketOut	 * @param byteArray	 * @throws IOException	 */	protected void request(OutputStream socketOut,byte[] byteArray)throws IOException {		request(socketOut);		socketOut.write(byteArray);	}		/**	 * 取得请求头	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @return	 */	protected byte[] getRequestHeaderAndBody() {		if(body==null){			body = new byte[0];		}		byte[] header = new byte[FDFS_PROTO_PKG_LEN_SIZE + 2 + body.length];		Arrays.fill(header, (byte) 0);		byte[] hex_len = BityUtils.long2buff(body.length+body2Len);		System.arraycopy(hex_len, 0, header, 0, hex_len.length);		System.arraycopy(body, 0, header, FDFS_PROTO_PKG_LEN_SIZE + 2, body.length);		header[PROTO_HEADER_CMD_INDEX] = requestCmd;		header[PROTO_HEADER_STATUS_INDEX] = (byte) 0;		return header;	}		/**	 * 响应	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param socketIn	 * @return	 * @throws IOException	 */	protected Response response(InputStream socketIn)throws IOException {		ByteArrayOutputStream os = new ByteArrayOutputStream();		int code = response(socketIn,os);		return new Response(code, os.toByteArray());	}		/**	 * 响应	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param socketIn	 * @param os	 * @return	 * @throws IOException	 */	protected int response(InputStream socketIn,OutputStream os) throws IOException {		byte[] header = new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];				int bytes = socketIn.read(header);				if (bytes != header.length) {			throw new IOException("recv package size " + bytes + " != "	+ header.length);		}		if (header[PROTO_HEADER_CMD_INDEX] != responseCmd) {			throw new IOException("recv cmd: " + header[PROTO_HEADER_CMD_INDEX]	+ " is not correct, expect cmd: " + responseCmd);		}		if (header[PROTO_HEADER_STATUS_INDEX] != SUCCESS_CODE) {			return header[PROTO_HEADER_STATUS_INDEX];		}		long respSize = BityUtils.buff2long(header, 0);		if (respSize < 0) {			throw new IOException("recv body length: " + respSize + " < 0!");		}		if (responseSize >= 0 && respSize != responseSize) {			throw new IOException("recv body length: " + respSize + " is not correct, expect length: " + responseSize);		}				byte[] buff = new byte[2 * 1024];		int totalBytes = 0;		int remainBytes = (int) respSize;		while (totalBytes < respSize) {			int len = remainBytes;			if(len>buff.length){				len = buff.length;			}						if ((bytes = socketIn.read(buff, 0, len)) < 0) {				break;			}			os.write(buff, 0, bytes);			totalBytes += bytes;			remainBytes -= bytes;		}		if (totalBytes != respSize) {			throw new IOException("recv package size " + totalBytes + " != "+ respSize);		}		os.close();		return SUCCESS_CODE;	}	/**	 * 文件附件信息转字符串	 * 目的：	 * @author lixuefeng	 * @date 2016年1月7日	 * @param metaData	 * @return	 */    protected String metaDataToStr(Map<String,String> metaData){        StringBuffer sb = new StringBuffer();        for(String key:metaData.keySet()){            sb.append(FDFS_RECORD_SEPERATOR);            sb.append(key);            sb.append(FDFS_FIELD_SEPERATOR);            sb.append(metaData.get(key));        }        return sb.toString().substring(FDFS_RECORD_SEPERATOR.length());    }	    /**     * 响应载体     * 目的：     * @author lixuefeng     * @date 2016年1月7日     * @version 1.0     */	protected class Response {				private int code;		//body		private byte[] data;				public Response(int code) {			super();			this.code = code;		}		public Response(int code, byte[] data) {			super();			this.code = code;			this.data = data;		}		public boolean isSuccess(){			return code == SUCCESS_CODE;		}		public int getCode() {			return code;		}		public void setCode(int code) {			this.code = code;		}		public byte[] getData() {			return data;		}		public void setData(byte[] data) {			this.data = data;		}	}	}