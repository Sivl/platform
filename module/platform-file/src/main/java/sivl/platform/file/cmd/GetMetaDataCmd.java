package sivl.platform.file.cmd;import java.io.IOException;import java.net.Socket;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import sivl.platform.file.model.FileResultModel;/** * 取得文件附件信息命令<br/> * 目的： * @author lixuefeng * @date 2016年1月7日 * @version 1.0 */public class GetMetaDataCmd extends AbstractCmd<Map<String, String>> {	public GetMetaDataCmd(String group, String fileName) {		super();		byte[] groupByte = group.getBytes(charset);		int group_len = groupByte.length;		if (group_len > FDFS_GROUP_NAME_MAX_LEN) {			group_len = FDFS_GROUP_NAME_MAX_LEN;		}		byte[] fileNameByte = fileName.getBytes(charset);		body = new byte[FDFS_GROUP_NAME_MAX_LEN + fileNameByte.length];		Arrays.fill(body, (byte) 0);		System.arraycopy(groupByte, 0, body, 0, group_len);		System.arraycopy(fileNameByte, 0, body, FDFS_GROUP_NAME_MAX_LEN, fileNameByte.length);		this.requestCmd = STORAGE_PROTO_CMD_GET_METADATA;		this.responseCmd = STORAGE_PROTO_CMD_RESP;		this.responseSize = -1;	}		@Override	public FileResultModel<Map<String, String>> exec(Socket socket) throws IOException {		request(socket.getOutputStream());		Response response = response(socket.getInputStream());		if(response.isSuccess()){			String metaStr = new String(response.getData(),charset);			Map<String, String> metaData = new HashMap<String, String>();			String[] rows = metaStr.split(FDFS_RECORD_SEPERATOR);			for(String row:rows){				String[] cols = row.split(FDFS_FIELD_SEPERATOR);				metaData.put(cols[0], cols[1]);			}			return new FileResultModel<Map<String, String>>(response.getCode(),metaData);		}else{			return new FileResultModel<Map<String, String>>(response.getCode(),"GetMetaData Error");		}	}}