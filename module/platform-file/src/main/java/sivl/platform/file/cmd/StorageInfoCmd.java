package sivl.platform.file.cmd;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.Socket;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import sivl.platform.file.model.FileResultModel;import sivl.platform.file.model.FileStorageInfoModel;/** * 文件存储信息命令 * 目的： * @author lixuefeng * @date 2016年1月7日 * @version 1.0 */public class StorageInfoCmd extends AbstractCmd<List<FileStorageInfoModel>> {	@Override	public FileResultModel<List<FileStorageInfoModel>> exec(Socket socket) throws IOException {		request(socket.getOutputStream());		Response response = response(socket.getInputStream());		if(response.isSuccess()){			byte[] data = response.getData();			int dataLength = data.length;			if(dataLength%FileStorageInfoModel.BYTE_SIZE!=0){				throw new IOException("recv body length: " + data.length + " is not correct");			}			List<FileStorageInfoModel> storageInfos = new ArrayList<FileStorageInfoModel>();			int offset = 0;			while(offset<dataLength){				FileStorageInfoModel storageInfo = new FileStorageInfoModel(data,offset);				storageInfos.add(storageInfo);				offset += FileStorageInfoModel.BYTE_SIZE;			}			return new FileResultModel<List<FileStorageInfoModel>>(response.getCode(), storageInfos);		}else{			return new FileResultModel<List<FileStorageInfoModel>>(response.getCode(), "Error");		}	}	public StorageInfoCmd(String group) throws UnsupportedEncodingException {		super();		int group_len;		byte[] bs = group.getBytes("UTF-8");		body = new byte[FDFS_GROUP_NAME_MAX_LEN];		if (bs.length <= FDFS_GROUP_NAME_MAX_LEN) {			group_len = bs.length;		} else {			group_len = FDFS_GROUP_NAME_MAX_LEN;		}		Arrays.fill(body, (byte) 0);		System.arraycopy(bs, 0, body, 0, group_len);		this.requestCmd = TRACKER_PROTO_CMD_SERVER_LIST_STORAGE;		this.responseCmd = TRACKER_PROTO_CMD_RESP;		this.responseSize = -1;	}	public StorageInfoCmd(String group,String ip) throws UnsupportedEncodingException {		super();		int group_len;		byte[] groupByte = group.getBytes("UTF-8");		byte[] ipByte = ip.getBytes("UTF-8");		body = new byte[FDFS_GROUP_NAME_MAX_LEN + ipByte.length];		if (groupByte.length <= FDFS_GROUP_NAME_MAX_LEN) {			group_len = groupByte.length;		} else {			group_len = FDFS_GROUP_NAME_MAX_LEN;		}		Arrays.fill(body, (byte) 0);		System.arraycopy(groupByte, 0, body, 0, group_len);		System.arraycopy(ipByte, 0, body, FDFS_GROUP_NAME_MAX_LEN, ipByte.length);		this.requestCmd = TRACKER_PROTO_CMD_SERVER_LIST_STORAGE;		this.responseCmd = TRACKER_PROTO_CMD_RESP;		this.responseSize = -1;	}		}