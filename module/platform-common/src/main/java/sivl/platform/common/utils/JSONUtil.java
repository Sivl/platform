package sivl.platform.common.utils;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;/** * json 工具类<br/> * 目的：对json进行各种操作<br/> * <h>常用注解</h> * <ul> * <li>@JsonIgnoreProperties</li> * <li>@JsonIgnore</li> * <li>@JsonFormat(pattern = "yyyy-MM-dd HH-mm-ss")</li> * <li>@JsonSerialize 在序列化时嵌入我们自定义的代码</li> * <li>@JsonDeserialize 反序列化时可以嵌入我们自定义的代码</li> * <li>@JsonIgnoreProperties</li> * </ul> * @author lixuefeng * @createTime 2015年12月3日 * @version 1.0 */public class JSONUtil {	//json转换核心对象	private final static ObjectMapper objectMapper = new ObjectMapper();		public static String obj2json(Object obj){		try {			return objectMapper.writeValueAsString(obj);		} catch (JsonProcessingException e) {			//TODO 记录日志			return null;		}	}		@SuppressWarnings("unchecked")	public static <T>T json2Object(String jsonStr,Class<T> clazz){		try {			return clazz.equals(String.class) ? (T) jsonStr : objectMapper.readValue(jsonStr, clazz);		} catch (IOException e) {			//TODO 记录日志			return null;		}	}		@SuppressWarnings("unchecked")	public static <T> Map<String, Object> json2map(String jsonStr){		try {			return objectMapper.readValue(jsonStr, Map.class);		} catch (IOException e) {			//TODO 记录日志			return null;		}	}		public static <T> Map<String, T> json2map(String jsonStr, Class<T> clazz) {		try {			Map<String, Map<String, Object>> map = objectMapper.readValue(jsonStr, new TypeReference<Map<String, T>>() {});			Map<String, T> result = new HashMap<String, T>();			for (Entry<String, Map<String, Object>> entry : map.entrySet()) {				result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));			}			return result;		} catch (IOException e) {			//TODO 记录日志			return null;		}	}		public static <T> List<T> json2list(String jsonStr, Class<T> clazz){		try {			List<Map<String, Object>> list = objectMapper.readValue(jsonStr,new TypeReference<List<T>>() {});			List<T> result = new ArrayList<T>();			for (Map<String, Object> map : list) {			   result.add(map2pojo(map, clazz));			}			objectMapper.readValue(jsonStr, clazz);			return result;		} catch (Exception e) {			//TODO 记录日志			return null;		}	}		@SuppressWarnings("rawtypes")	public static <T> T map2pojo(Map map, Class<T> clazz) {		return objectMapper.convertValue(map, clazz);	}}