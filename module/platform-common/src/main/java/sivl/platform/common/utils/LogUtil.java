package sivl.platform.common.utils;import javax.annotation.PostConstruct;import org.apache.log4j.Logger;import org.springframework.beans.BeansException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import sivl.platform.common.adapter.MongodbAdapter;import sivl.platform.common.constant.Constant;import sivl.platform.common.constant.LogEnum;import sivl.platform.common.model.SysParamModel;import sivl.platform.common.service.SysParamService;/** * 日志工具类<br/> * 目的:持久化各种日志信息进入mongedb<br/> * 日志分类:请求日志、业务日志<br/> * <h1>请求日志：</h1> * <ol> * 	<li>记录所有请求</li> * 	<li>被拦截的请求</li> *  <li>正常请求</li> * </ol> * <h1>业务日志：</h1> * <ol> * 	<li>info</li> * 	<li>debug</li> *  <li>warn</li> *  <li>error</li> * </ol> * @author lixuefeng * @createTime 2015年12月2日 * @version 1.0 */@Componentpublic class LogUtil {		@Autowired	private SysParamService sysParamService;		//自身	private static LogUtil current;		private static Logger logger = null;		@PostConstruct	public void init() {		//把初始化后的实体付给静态本身		current = this;		current.sysParamService = this.sysParamService;	}		/**	 * 记录日志	 * @param logEnum	 * @param jsonContent	 */	private static void log(LogEnum logEnum,String jsonContent,Class<?> clazz){		try {			MongodbAdapter mongodbAdapter = SpringContextUtil.getBean(MongodbAdapter.class);			mongodbAdapter.saveLog(logEnum, jsonContent);		} catch (BeansException e) {			//如果出现异常			defaultLog(logEnum, jsonContent, clazz);		}	}		/**	 * 默认日志记录<br/>	 * 方式：log4j	 * @param logEnum	 * @param jsonContent	 * @param clazz	 */	private static void defaultLog(LogEnum logEnum,String jsonContent,Class<?> clazz){		logger = Logger.getLogger(clazz);		//判断是什么类型日志，如果为网络正常请求日志默认记录为info级别日志；如果为攻击日志，默认记录为warn级别日志		if(LogEnum.NET_LOG.getCode().equals(logEnum.getParentCode()) && LogEnum.LEGAL_NET_LOG.getCode().equals(logEnum.getCode())){			logger.info("【"+logEnum.getName()+"】"+jsonContent);			return;		}		//为网络攻击日志		if(LogEnum.NET_LOG.getCode().equals(logEnum.getParentCode()) && !LogEnum.LEGAL_NET_LOG.getCode().equals(logEnum.getCode())){			logger.warn("【"+logEnum.getName()+"】"+jsonContent);			return;		}		//为业务日志		if(LogEnum.INFO_BUZ_LOG.getCode().equals(logEnum.getCode())){			logger.info("【"+logEnum.getName()+"】"+jsonContent);			return;		}		if(LogEnum.DEBUG_BUZ_LOG.getCode().equals(logEnum.getCode())){			logger.debug("【"+logEnum.getName()+"】"+jsonContent);			return;		}		if(LogEnum.WARN_BUZ_LOG.getCode().equals(logEnum.getCode())){			logger.warn("【"+logEnum.getName()+"】"+jsonContent);			return;		}		if(LogEnum.ERROR_BUZ_LOG.getCode().equals(logEnum.getCode())){			logger.error("【"+logEnum.getName()+"】"+jsonContent);			return;		}	}		/**	 * 是否记录业务日志	 * @param buzLogEnum	 * @return	 */	private static boolean isLogBuz(LogEnum buzLogEnum){		boolean result = false;		//读取系统配置		SysParamModel sysParam = current.sysParamService.getSysParamEnableByCode(Constant.BUZ_LOG_SWITCH.getKey());		if(sysParam == null){			return result;		}		String logLeve = sysParam.getValue();		//判断当前打印什么日志		if(LogEnum.DEBUG_BUZ_LOG.equals(buzLogEnum)){			//为debug级别日志			//系统开启了debug级别日志			if(logLeve.equals(LogEnum.DEBUG_BUZ_LOG.getValue())){				//打印日志				return true;			}			return false;		}		if(LogEnum.INFO_BUZ_LOG.equals(buzLogEnum)){			//如果为info级别日志			//系统开启了debug info 级别日志			if(logLeve.equals(LogEnum.DEBUG_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.INFO_BUZ_LOG.getValue())){				//打印日志				return true;			}			return false;		}		if(LogEnum.WARN_BUZ_LOG.equals(buzLogEnum)){			//如果为warn级别日志			//系统开启了debug info warn级别日志			if(logLeve.equals(LogEnum.DEBUG_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.INFO_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.WARN_BUZ_LOG.getValue())){				//打印日志				return true;			}			return false;		}		if(LogEnum.ERROR_BUZ_LOG.equals(buzLogEnum)){			//如果为error级别日志			//系统开启了debug info warn error级别日志			if(logLeve.equals(LogEnum.DEBUG_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.INFO_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.WARN_BUZ_LOG.getValue()) || logLeve.equals(LogEnum.ERROR_BUZ_LOG.getValue())){				//打印日志				return true;			}			return false;		}		return result;	}		/**	 * 合法日志请求	 * @param jsonContent	 */	public static void netLegalLog(String jsonContent,Class<?> clazz){		log(LogEnum.LEGAL_NET_LOG,jsonContent,clazz);	}		/**	 * 跨域攻击日志	 * @param jsonContent	 */	public static void netCSRFLog(String jsonContent,Class<?> clazz){		log(LogEnum.CSRF_NET_LOG, jsonContent,clazz);	}		/**	 * token伪造攻击日志	 * @param jsonContent	 */	public static void netTokenLog(String jsonContent,Class<?> clazz){		log(LogEnum.TOKEN_NET_LOG, jsonContent,clazz);	}		/**	 * 重复提交日志	 * @param jsonContent	 */	public static void netResubmitLog(String jsonContent,Class<?> clazz){		log(LogEnum.RESUBMIT_NET_LOG, jsonContent,clazz);	}		/**	 * info日志	 * @param jsonContent	 */	public static void info(String jsonContent,Class<?> clazz){		//判断是否需要记录		if(!isLogBuz(LogEnum.INFO_BUZ_LOG)){			return;		}		log(LogEnum.INFO_BUZ_LOG, jsonContent,clazz);	}		/**	 * debug日志	 * @param jsonContent	 */	public static void debug(String jsonContent,Class<?> clazz){		//判断是否需要记录		if(!isLogBuz(LogEnum.DEBUG_BUZ_LOG)){			return;		}		log(LogEnum.DEBUG_BUZ_LOG, jsonContent,clazz);	}		/**	 * warn日志	 * @param jsonContent	 */	public static void warn(String jsonContent,Class<?> clazz){		//判断是否需要记录		if(!isLogBuz(LogEnum.WARN_BUZ_LOG)){			return;		}		log(LogEnum.WARN_BUZ_LOG, jsonContent,clazz);	}		/**	 * error日志	 * @param jsonContent	 */	public static void error(String jsonContent,Class<?> clazz){		//判断是否需要记录		if(!isLogBuz(LogEnum.ERROR_BUZ_LOG)){			return;		}		log(LogEnum.ERROR_BUZ_LOG, jsonContent,clazz);	}}