package sivl.platform.common.encrypt;import java.io.IOException;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Map;/** * 签名算法<br/> * 目的：公用签名算法<br/> * @author lixuefeng * @createTime 2015年12月22日 * @version 1.0 */public class Sign {	/**	 * 签名算法<br/>	 * 算法：	 * <ul>	 * <li>请求参数按参数名升序排序</li>	 * <li>按 请 求 参 数 名 及 参 数 值 相 互 连 接 组 成 一 个 字 符 串</li>	 * <li>将应用密钥分别添加到以上请求参数串的头部和尾部</li>	 * <li>对该字符串进行 SHA1 运算，得到一个二进制数组</li>	 * <li>将该二进制数组转换为十六进制的字符串，该字符串即是这些请求参数对应的签名</li>	 * </ul>	 * @author lixuefeng	 * @createTime 2015年12月22日	 * @param paramValues	 * @param ignoreParamNames	 * @param secret	 * @return	 * @throws IOException	 */	public static String sign(Map<String, String> paramValues, List<String> ignoreParamNames,String secret) throws IOException {		StringBuilder sb = new StringBuilder();        List<String> paramNames = new ArrayList<String>(paramValues.size());        paramNames.addAll(paramValues.keySet());        if(ignoreParamNames != null && ignoreParamNames.size() > 0){            for (String ignoreParamName : ignoreParamNames) {                paramNames.remove(ignoreParamName);            }        }        //请求参数按参数名升序排序        Collections.sort(paramNames);        sb.append(secret);        for (String paramName : paramNames) {            sb.append(paramName).append(paramValues.get(paramName));        }        sb.append(secret);        byte[] sha1Digest = HexConversion.getSHA1Digest(sb.toString());        return HexConversion.byte2hex(sha1Digest);    }}