package sivl.platform.common.filter;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import sivl.platform.common.constant.Constant;import sivl.platform.common.constant.ErrorCode;import sivl.platform.common.encrypt.Sign;import sivl.platform.common.model.NetLogModel;import sivl.platform.common.service.SysParamService;import sivl.platform.common.utils.HttpClientUtils;import sivl.platform.common.utils.JSONUtil;import sivl.platform.common.utils.LogUtil;import sivl.platform.common.utils.StringUtil;/** * 令牌校验<br/> * 目的：对令牌进行校验 * @author lixuefeng * @createTime 2015年12月2日 * @version 1.0 */public class TokenHandInterceptor extends HandlerInterceptorAdapter {		private static String className = "sivl.platform.base.filter.TokenHandInterceptor";	@Autowired	private SysParamService sysParamService;		@Override	public boolean preHandle(HttpServletRequest request,			HttpServletResponse response, Object handler) throws Exception {		//请求uri		String url = request.getRequestURI();		String needFilterUrls = sysParamService.getValue(Constant.TOCKEN_FILTER_URL.getKey());		String[] needFilterUrl = needFilterUrls.split("\\|");		boolean doFilter = isDoFilter(needFilterUrl, url);		if(doFilter){			//对请求参数进行token校验			String returnFmt = HttpClientUtils.getRequestFormat(request);//数据返回格式			Long startTime = new Date().getTime();			//请求时间戳			Long timesTamp = null;			try {				timesTamp = Long.parseLong(request.getParameter(Constant.TIMES_TAMP.getKey()));			} catch (Exception e) {							}			if(null == timesTamp){				//签名参数名为必传字段				HttpClientUtils.handErrorResponse(request, response, returnFmt, "请求参数异常:时间戳为空",ErrorCode.error500);				LogUtil.netTokenLog(JSONUtil.obj2json(new NetLogModel(request).buildClassName(className).buildInterfaceName(request.getRequestURI()).buildMsg("token攻击!请求参数异常:时间戳为空")), TokenHandInterceptor.class);				return false;			}			//请求不能超过5分钟			if((timesTamp+5*60*1000) < startTime){				HttpClientUtils.handErrorResponse(request, response, returnFmt, "请求超时",ErrorCode.error500);				return false;			}			//请求签名			String signValue = request.getParameter(Constant.SIGN_NAME.getKey());			if(StringUtil.isEmpty(signValue)){				//签名参数名为必传字段				HttpClientUtils.handErrorResponse(request, response, returnFmt, "请求参数异常:签名参数为空",ErrorCode.error500);				LogUtil.netTokenLog(JSONUtil.obj2json(new NetLogModel(request).buildClassName(className).buildInterfaceName(request.getRequestURI()).buildMsg("token攻击!请求参数异常:签名参数为空")), TokenHandInterceptor.class);				return false;			}			String secret = sysParamService.getValue(Constant.SIGN_KEY.getKey());			Map<String,String> paramValues = request.getParameterMap();			List<String> ignoreParamNames = new ArrayList<String>();			ignoreParamNames.add(Constant.SIGN_NAME.getKey());			String sign = Sign.sign(paramValues, ignoreParamNames, secret);			if(signValue.equals(sign)){				return true;			}			HttpClientUtils.handErrorResponse(request, response, returnFmt, "签名不合法",ErrorCode.error500);			LogUtil.netTokenLog(JSONUtil.obj2json(new NetLogModel(request).buildClassName(className).buildInterfaceName(request.getRequestURI()).buildMsg("token攻击!签名不合法")), TokenHandInterceptor.class);			return false;		}		return super.preHandle(request, response, handler);	}		/**	 * 需要进行过滤	 * @param needFilter	 * @param url	 * @return boolean	 */	public boolean isDoFilter(String[] needFilter ,String url){		//不需要进行过滤校验		boolean result = false;		for(String filter : needFilter){			if(url.indexOf(filter) != -1){				//需要进行过滤校验				return true;			}		}		return result;	}}