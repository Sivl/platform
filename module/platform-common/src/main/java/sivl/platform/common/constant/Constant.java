package sivl.platform.common.constant;/** * 平台常量对象<br/> * 目的：提供公用常量参数 * @author lixuefeng * @createTime 2015年11月21日 * @version 1.0 */public enum Constant {	/********************基础常量************************/	UTF8("基础常量","code_utf","UTF8编码","UTF-8","UTF8编码",true),	TIMES_TAMP("基础常量","code_timesTamp","时间戳参数名","timesTamp","时间戳参数名",true),			/********************安全校验************************/	/** 重复提交令牌密钥 .*/	RESUBMIT_TOKEN_KEY("安全","code_resubmit_key","重复提交令牌密钥","sivl.platform.token","用于进行重复提交校验",true),	/** 签名密钥 .*/	SIGN_KEY("安全","code_sign_key","签名密钥","sivl.platform.sign","用于进行签名运算核心密钥",true),	/** 签名参数名 .*/	SIGN_NAME("安全","code_sign_name","签名参数名","sign","用于需要根据参数获取签名值",true),	/** 用户参数名 .*/	USER_SESSION_KEY("安全","code_u_session_key","用户seesion参数名密钥","user_seesion_key","用户登录后session的用户信息",true),	/** 需校验登录的请求. */	LOGIN_FILTER_URL("安全","code_login_ck","需校验登录的请求","login_ck","对所配置的链接模式进行登录校验",true),	/** 需校验令牌的请求. */	TOCKEN_FILTER_URL("安全","code_token_ck","需校验令牌的请求","token_ck","对所配置的链接模式进行令牌校验",true),	/** 需校验CSRF来源的请求. */	CSRF_FILTER_URL("安全","code_csrf_ck","需校验CSRF来源的请求","csrf_ck","对所配置的链接模式进行来源校验",true),	/** 需校验CSRF来源的值. */	CSRF_FILTER_VALUE("安全","code_csrf_value","需校验CSRF来源的值","csrf_value","对所配置的链接模式进行CSRF值校验(校验来源域名或IP)",true),		/********************定期任务************************/	/** 默认任务分组 name:默认任务分组;value:defauleGroup. */	DEFALUE_TASK_GROUP("定期任务","code_task_d_group","默认任务分组","defauleGroup","用于计划任务中没有定义任务组的任务",true),			/******************业务页面错误或正常配置***********************/	/** 200. */	SUCCESS("常用正常","code_200","请求成功","200","请求成功",true),		/** 404错误. */	ERROR_404("常用错误","code_404","404错误","forward:404.jsp","页面找不到！",true),	/** 500内部服务器错误. */	ERROR_500("常用错误","code_500","500内部服务器错误","forward:500.jsp","内部服务器错误！",true),	/** SOCKET参数异常错误. */	SOCKET_EXP_PARAM_1("socket常用错误","code_s_e_1","参数异常","-601","请求参数异常",true),		/******************日志开启配置***********************/	/** 网络日志. */	NET_LOG_SWITCH("日志开启配置","code_net_log","网络日志开关","on","on：开启，off：关闭",true),	/** 业务日志. */	BUZ_LOG_SWITCH("日志开启配置","code_buz_log","网络日志开关","info","info:开启info日志,debug:开启调试日志,warn:开启警告日志,error:开启错误日志,off:不记录日志",true),		/******************微信配置************************/	/** 微信公众号 appid. */	WE_CHAT_APPID("微信配置","code_we_chat_appid","第三方用户唯一凭证","***","默认为：***",true),	/** 微信公众号第三方用户唯一凭证密钥. */	WE_CHAT_SECRET("微信配置","code_we_chat_secret","第三方用户唯一凭证密钥","****","默认为：****",true),		NULL(null,null,"空枚举",null,"空枚举",null),	;		//参数组名	private String groupName;	//关键字 code	private String key;	//参数名	private String name;	//参数值	private String value;	//描述	private String describe;	//启用/停用	private Boolean enabled;		/**	 * 常量	 * @param groupName	 * @param name	 * @param value	 * @param defalueValue	 * @param describe	 * @param enabled	 */	Constant(String groupName,String key,String name,String value,String describe,Boolean enabled){		this.groupName = groupName;		this.key = key;		this.name = name;		this.value= value;		this.describe=describe;		this.enabled = enabled; 	}	/** 参数分组名. */	public String getGroupName() {		return groupName;	}	/** key. */	public String getKey() {		return key;	}	/** 参数名. */	public String getName() {		return name;	}	/** 参数值. */	public String getValue() {		return value;	}	public Boolean isEnabled() {		return enabled;	}	/** 参数描述. */	public String getDescribe() {		return describe;	}		/**	 * 根据key取得系统参数枚举	 * @param key	 * @return	 */	public static Constant getConstant(String key){		if(null == key){			return Constant.NULL;		}		Constant[] _cons = Constant.values();		for(Constant con : _cons){			if(con.getKey().equals(key)){				return con;			}		}		return Constant.NULL;	}}