package sivl.platform.common.utils;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.http.HttpEntity;import org.apache.http.NameValuePair;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import sivl.platform.common.constant.ErrorCode;import sivl.platform.common.model.ResultModel;/** * http 工具类<r/> * 目的： * @author lixuefeng * @createTime 2015年12月11日 * @version 1.0 */public class HttpClientUtils {	private static final String CHARSET = "UTF-8";	private static CloseableHttpClient httpClient;	static {		RequestConfig config = RequestConfig.custom().setConnectTimeout(6000000)				.setSocketTimeout(15000).build();		httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config)				.build();	}		/**	 * 取得远程客服端ip	 * @author lixuefeng	 * @createTime 2015年12月11日	 * @param request	 * @return	 */	public static String getRemoteAddr(HttpServletRequest request){		String ip = request.getHeader("X-Forwarded-For");        if(StringUtil.isNotEmpty(ip) && !"unKnown".equalsIgnoreCase(ip)){            //多次反向代理后会有多个ip值，第一个ip才是真实ip            int index = ip.indexOf(",");            if(index != -1){                return ip.substring(0,index);            }else{                return ip;            }        }        ip = request.getHeader("X-Real-IP");        if(StringUtil.isNotEmpty(ip) && !"unKnown".equalsIgnoreCase(ip)){            return ip;        }        return request.getRemoteAddr();	}		/**	 * 取得域名	 * @author lixuefeng	 * @createTime 2015年12月22日	 * @param request	 * @return	 */	public static String getDomain(HttpServletRequest request){		StringBuffer url = request.getRequestURL();  		String tempContextUrl = url.delete(url.length() - request.getRequestURI().length(), url.length()).append("/").toString(); 		return tempContextUrl;	}		/**	 * 取得二级域名	 * @author lixuefeng	 * @createTime 2015年12月23日	 * @param request	 * @return	 */	public static String getDomainTwo(HttpServletRequest request){		StringBuffer url = request.getRequestURL();  		String tempContextUrl = url.delete(url.length() - request.getRequestURI().length(), url.length()).append(request.getContextPath()).append("/").toString();		return tempContextUrl;	}		/**	 * 取得请求需要返回数据的格式	 * @author lixuefeng	 * @createTime 2015年12月22日	 * @param request	 * @return	 */	public static String getRequestFormat(HttpServletRequest request){		String format = request.getParameter("format");		if(StringUtil.isNotEmpty(format)){			return format;		}		String url = request.getRequestURI();		url = url.substring(url.lastIndexOf("/")+1);		if(url.lastIndexOf(".") > 0){			return format = url.substring(url.lastIndexOf(".")+1);		}		return "html";	}				/**	 * 处理错误响应	 * @author lixuefeng	 * @createTime 2015年12月22日	 * @param request	 * @param response	 * @param returnFmt	 */	public static void handErrorResponse(HttpServletRequest request,HttpServletResponse response,String returnFmt,String msg,String errorCode){		try {			ResultModel<String> errorResult = new ResultModel<String>();			errorResult.setCode(errorCode);			errorResult.setMsg(msg);			if("html".equals(returnFmt)){				if(ErrorCode.error501.equals(errorCode)){					//重新登录					response.sendRedirect(getDomain(request)+"platform/login.jsp");					return;				}				//如果为html重定向到404页面				response.sendRedirect(getDomain(request)+"platform/404.jsp");				return;			}			if("json".equals(returnFmt)){				responseOutWithJson(response,JSONUtil.obj2json(errorResult));				return;			}			if("xml".equals(returnFmt)){				responseOutWithXml(response,XmlUtil.bean2xml(errorResult));				return;			}			response.sendRedirect(getDomain(request)+"platform/404.jsp");		} catch (IOException e) {			e.printStackTrace();		}	}		/**	 * 以JSON格式输出	 * @param response	 */	protected static void responseOutWithJson(HttpServletResponse response,String jsonData) {		response.setCharacterEncoding("UTF-8");		response.setContentType("application/json; charset=utf-8");		PrintWriter out = null;		try {			out = response.getWriter();			out.append(jsonData);		} catch (IOException e) {			e.printStackTrace();		} finally {			if (out != null) {				out.close();			}		}	}		/**	 * 以XML格式输出	 * @param response	 */	protected static void responseOutWithXml(HttpServletResponse response,String xmlData) {		response.setCharacterEncoding("UTF-8");		response.setContentType("application/xml; charset=utf-8");		PrintWriter out = null;		try {			out = response.getWriter();			out.append(xmlData);		} catch (IOException e) {			e.printStackTrace();		} finally {			if (out != null) {				out.close();			}		}	}	/**	 * 功能说明：HTTP Get 获取内容（编码格式默认UTF-8）	 * @author lixuefeng	 * @createTime 2015年12月11日	 * @param url	 * @param params	 * @return	 * @throws Exception	 */	public static String doGet(String url, Map<String, String> params) throws Exception {		return doGet(url, params, CHARSET);	}	/**	 * 功能说明：HTTP Post 获取内容（编码格式默认UTF-8）	 * @author lixuefeng	 * @createTime 2015年12月11日	 * @param url	 * @param params	 * @return	 * @throws Exception	 */	public static String doPost(String url, Map<String, String> params) throws Exception {		return doPost(url, params, CHARSET);	}	/**	 * 功能说明：HTTP Get 获取内容	 * @author lixuefeng	 * @createTime 2015年12月11日	 * @param url	 * @param params	 * @param charset	 * @return	 * @throws Exception	 */	public static String doGet(String url, Map<String, String> params,			String charset) throws Exception {		if (StringUtil.isEmpty(url)) {			return null;		}		try {			if (params != null && !params.isEmpty()) {				List<NameValuePair> pairs = new ArrayList<NameValuePair>(						params.size());				for (Map.Entry<String, String> entry : params.entrySet()) {					if (entry.getKey() == null)						continue;					pairs.add(new BasicNameValuePair(entry.getKey(), entry							.getValue()));				}				url += "?"						+ EntityUtils.toString(new UrlEncodedFormEntity(pairs,								charset));			}			HttpGet httpGet = new HttpGet(url);			CloseableHttpResponse response = httpClient.execute(httpGet);			int statusCode = response.getStatusLine().getStatusCode();			if (statusCode != 200) {				httpGet.abort();				throw new RuntimeException("HttpClient,error status code :"						+ statusCode);			}			HttpEntity entity = response.getEntity();			String result = null;			if (entity != null) {				result = EntityUtils.toString(entity, "utf-8");			}			EntityUtils.consume(entity);			response.close();			System.out.println(result);			return result;		} catch (Exception e) {			throw new RuntimeException(e);		}	}	/**	 * 功能说明：HTTP Post 获取内容	 * @author lixuefeng	 * @createTime 2015年12月11日	 * @param url	 * @param paramater	 * @param charSet	 * @return	 * @throws Exception	 */	public static String doPost(String url, Map<String, String> paramater,			String charSet) throws Exception {		if (StringUtil.isEmpty(url)) {			return null;		}		try {			List<NameValuePair> pairs = null;			if (paramater != null && !paramater.isEmpty()) {				pairs = new ArrayList<NameValuePair>(paramater.size());				for (Map.Entry<String, String> entry : paramater.entrySet()) {					if (entry.getKey() == null)						continue;					pairs.add(new BasicNameValuePair(entry.getKey(), entry							.getValue()));				}			}			HttpPost httpPost = new HttpPost(url);			if (pairs != null && pairs.size() > 0) {				httpPost.setEntity(new UrlEncodedFormEntity(pairs, charSet));			}			CloseableHttpResponse response = httpClient.execute(httpPost);			int statusCode = response.getStatusLine().getStatusCode();			if (statusCode != 200) {				httpPost.abort();				throw new RuntimeException("HttpClient,error status code :"						+ statusCode);			}			HttpEntity entity = response.getEntity();			String result = null;			if (entity != null) {				result = EntityUtils.toString(entity, "utf-8");			}			EntityUtils.consume(entity);			response.close();			System.out.println(result);			return result;		} catch (Exception e) {			throw new RuntimeException(e);		}	}}